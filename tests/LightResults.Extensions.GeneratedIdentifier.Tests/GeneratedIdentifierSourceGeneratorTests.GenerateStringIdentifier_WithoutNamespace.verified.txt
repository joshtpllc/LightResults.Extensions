//-----------------------------------------------------------------------------
// <auto-generated>
// This code was generated by GeneratedIdentifierSourceGenerator which
// can be found in the LightResults.Extensions.GeneratedIdentifier namespace.
//
// Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------

#nullable enable

using System.ComponentModel;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;
using LightResults;
using LightResults.Extensions.ValueObjects;

[TypeConverter(typeof(TestStringIdTypeConverter))]
[JsonConverter(typeof(TestStringIdJsonConverter))]
readonly partial struct TestStringId :
    ICreatableValueObject<string, TestStringId>,
    IValueObject<string, TestStringId>,
    IComparable<TestStringId>,
    IComparable
{
    /// <summary>Gets whether this identifier is the default value.</summary>
    public bool IsDefault => _value == default;

    string IValueObject<string, TestStringId>.Value => _value;

    private readonly string _value;

    private TestStringId(string value, bool skipValidation = false)
    {
        if (!skipValidation)
            ValueObjectException.ThrowIfFailed(Validate(value));

        _value = value;
    }

    /// <inheritdoc />
    public static TestStringId Create(string value)
    {
        var result = TryCreate(value);
        if (result.IsSuccess(out var identifier, out var error))
            return identifier;

        throw new ValueObjectException(error.Message);
    }

    /// <inheritdoc />
    public static Result<TestStringId> TryCreate(string value)
    {
        var validation = Validate(value);
        if (validation.IsFailed(out var error))
            return Result.Fail<TestStringId>(error);

        return Result.Ok<TestStringId>(new TestStringId(value, true));
    }

    /// <inheritdoc />
    public bool Equals(TestStringId other)
    {
        return _value == other._value;
    }

    /// <inheritdoc />
    public override bool Equals(object? obj)
    {
        return obj is TestStringId other && Equals(other);
    }

    /// <inheritdoc />
    public override int GetHashCode()
    {
        return _value.GetHashCode();
    }

    /// <summary>Determines whether two instances of <see cref="TestStringId" /> are equal.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the instances are equal; otherwise, <c>false</c>.</returns>
    public static bool operator ==(TestStringId left, TestStringId right)
    {
        return left.Equals(right);
    }

    /// <summary>Determines whether two instances of <see cref="TestStringId" /> are not equal.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the instances are not equal; otherwise, <c>false</c>.</returns>
    public static bool operator !=(TestStringId left, TestStringId right)
    {
        return !left.Equals(right);
    }

    /// <inheritdoc />
    public int CompareTo(TestStringId other)
    {
        return _value.CompareTo(other._value);
    }

    /// <inheritdoc />
    public int CompareTo(object? obj)
    {
        if (ReferenceEquals(null, obj)) return 1;
        return obj is TestStringId other ? CompareTo(other) : throw new ArgumentException($"Object must be of type {nameof(TestStringId)}");
    }

    /// <summary>Determines whether the first instance of <see cref="TestStringId" /> is less than the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is less than the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator <(TestStringId left, TestStringId right)
    {
        return left.CompareTo(right) < 0;
    }

    /// <summary>Determines whether the first instance of <see cref="TestStringId" /> is greater than the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is greater than the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator >(TestStringId left, TestStringId right)
    {
        return left.CompareTo(right) > 0;
    }

    /// <summary>Determines whether the first instance of <see cref="TestStringId" /> is less than or equal to the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is less than or equal to the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator <=(TestStringId left, TestStringId right)
    {
        return left.CompareTo(right) <= 0;
    }

    /// <summary>Determines whether the first instance of <see cref="TestStringId" /> is greater than or equal to the second instance.</summary>
    /// <param name="left">The first instance to compare.</param>
    /// <param name="right">The second instance to compare.</param>
    /// <returns><c>true</c> if the first instance is greater than or equal to the second instance; otherwise, <c>false</c>.</returns>
    public static bool operator >=(TestStringId left, TestStringId right)
    {
        return left.CompareTo(right) >= 0;
    }

    /// <inheritdoc />
    public override string ToString()
    {
        return _value;
    }

    private static Result Validate(string value)
    {
        if (string.IsNullOrWhiteSpace(value))
            return Result.Fail("The value must not be empty.");

        return Result.Ok();
    }
}

public class TestStringIdTypeConverter : TypeConverter
{
    public override bool CanConvertFrom(ITypeDescriptorContext? context, Type sourceType)
    {
        return sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
    }

    public override object? ConvertFrom(ITypeDescriptorContext? context, CultureInfo? culture, object value)
    {
        if (value is string identifierValue)
            return TestStringId.Create(identifierValue);

        return base.ConvertFrom(context, culture, value);
    }
}

public class TestStringIdJsonConverter : JsonConverter<TestStringId>
{
    public override void Write(Utf8JsonWriter writer, TestStringId identifier, JsonSerializerOptions options)
    {
        var value = ((IValueObject<string, TestStringId>)identifier).Value;
        writer.WriteStringValue(value);
    }

    public override TestStringId Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        var value = reader.GetString();
        if (string.IsNullOrWhiteSpace(value))
            throw new InvalidOperationException("The value must not be empty.");

        return TestStringId.Create(value);
    }
}
